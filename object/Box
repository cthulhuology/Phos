An.object().named('Box').plural('Boxes').from({
	x: 0, y: 0, w: 0, h: 0,
	init: function() { return this.clone().copy({x:0,y:0,w:0,h:0}) },
	on: function(o) {
		var x = o.x ? o.x : 0;
		var y = o.y ? o.y : 0;
		var w = o.w ? o.w : 0;
		var h = o.h ? o.h : 0;
		return !( x+w < this.x || x > (this.x + this.w) || y+h < this.y || y > this.y + this.h);
	},
	overlaps: function(excluding) {
		var $self = this;
		return Widget.widgets.any(function(x) { 
			return x.can('on') && x != $self && !excluding.contains(x) && x.on($self) });
	},
	at: function(x,y) {
		this.x = Math.floor(x);
		this.y = Math.floor(y);
		return this;
	},
	to: function(x,y) {
		this.x += Math.floor(x);
		this.y += Math.floor(y);
		return this;
	},
	by: function(w,h) {
		this.w = Math.floor(w);
		this.h = Math.floor(h);
		return this;
	},
	scale: function(w,h) {
		this.w += w;
		this.h += h;
		return this;
	},
	as: function(b) { return this.at(b.x,b.y).by(b.w,b.h) },
	clamp: function(x,y,w,h) {
		this.x = Math.max(x,this.x);
		this.y = Math.max(y,this.y);
		this.x = Math.min(w - this.w,this.x);
		this.y = Math.min(h - this.h,this.y);
		return this;
	},
	towards: function(x,y) {
		var dx = x - this.x;
		var dy = y - this.y;
		return this.to(dx ? dx/Math.abs(dx): 0,dy ? dy/Math.abs(dy) : 0);
	},
});
