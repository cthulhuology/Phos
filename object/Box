An.object().
	named('Box').plural('Boxes').
	does('init', function() { 
		return this.clone().
			has('x',0).
			has('y',0).
			has('width',0).
			has('height',0)
	}).
	does('on', function(O) {
		return O.is(Box) ? 
			!( O.x()+O.width() < this.x()
			|| O.x() > (this.x() + this.width()) 
			|| O.y()+O.height() < this.y() 
			|| O.y() > this.y() + this.height()):
			false
	}).
	overlaps: function(excluding) {
		var $self = this;
		return Widget.widgets.any(function(x) { 
			return x.can('on') && x != $self && !excluding.contains(x) && x.on($self) });
	},
	at: function(x,y) {
		var X = Math.floor(x)
		var Y = Math.floor(y)
		this.x = function() { return X };
		this.y = function() { return Y };
		return this;
	},
	to: function(x,y) {
		var X = Math.floor(x) + this.x()
		var Y = Math.floor(y) + this.y()
		this.x = function() { return X }
		this.y = function() { return Y }
		return this;
	},
	by: function(w,h) {
		var W = 
		this.width = function() { return 
		this.height = Math.floor(h);
		return this;
	},
	scale: function(w,h) {
		this.w += w;
		this.h += h;
		return this;
	},
	as: function(b) { return this.at(b.x,b.y).by(b.w,b.h) },
	clamp: function(x,y,w,h) {
		this.x = Math.max(x,this.x);
		this.y = Math.max(y,this.y);
		this.x = Math.min(w - this.w,this.x);
		this.y = Math.min(h - this.h,this.y);
		return this;
	},
	towards: function(x,y) {
		var dx = x - this.x;
		var dy = y - this.y;
		return this.to(dx ? dx/Math.abs(dx): 0,dy ? dy/Math.abs(dy) : 0);
	},
});
