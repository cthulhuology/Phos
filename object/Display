An.object().named('Display').from(Widget, {
	dx: 1,
	dy: 1,
	app: null,
	canvas: null,
	scroll: function(e) { 
		this.to(e.dx/Display.dx,e.dy/Display.dy) 
	}, // Override this if you don't want the canvas to scroll
	draw: function() { 
		Screen.background(0,0,0) 
		Screen.as(this.extent).white().frame();
	}, // Override to change the background
	create: function() {
		this.canvas = $_('canvas');
		this.canvas.id = 'canvas';
		_body.style.margin = 0;
		_body.appendChild(this.canvas);
		this.canvas.width = this.w;
		this.canvas.height = this.h;
		return this;
	},
	init: function() {
		this.canvas = $('canvas');
		if (this.canvas) return this.at(0,0).by(this.canvas.width,this.canvas.height).instance();
		return this.at(0,0).by(window.innerWidth, window.innerHeight).create().instance();	
	},
	up: function(e) { 
		this.selected = [];
		var $self = this;
		if (this.extent && this.app) this.app.widgets.every(function(v,i) { if (v != $self && $self.extent.on(v)) $self.selected.push(v) });
		this.extent = this.selecting = this.moving = false;
	},
	down: function(e) { 
		if (this.selected) {  this.selected.every(function(v,i) { v.moving = e }) };
		if (e.overlaps([Display])) return;
		if (!Keyboard.shift) return this.moving = e;
		this.selecting = e;
	},
	move: function(e) { 
		if (this.selected.length) {
			this.selected.every(function(v,i) {
				if (v.moving) {
					var dx = e.x - v.moving.x;
					var dx = e.y - v.moving.y;
					v.to(dx,dy);
				}
			});
		}
		if (this.moving) return this.to(-(e.x-this.moving.x),-(e.y-this.moving.y)); 
		if (this.selecting) return this.extent = A.box().at(Math.min(this.selecting.x,e.x),Math.min(this.selecting.y,e.y)).by(Math.abs(e.x - this.selecting.x),Math.abs(e.y-this.selecting.y));
	},
}).init();
