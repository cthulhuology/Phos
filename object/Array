Array.prototype.every = function(F) {
	for (var J = 0; J < this.length; ++J) F(this[J],J)
	return this
}

Array.prototype.map = function(F) {
	var R = []
	this.every(function(O,J) { R.push(F(O)) })
	return R
}

// this is actually reduce... 
Array.prototype.apply = function(F,O) {
	var R = O
	this.every(function(X,J) { R = F(R,X) })
	return R
}
	
Array.prototype.contains = function(E) {
	var R = false
	this.every(function(O,J) { if (O == E) return R = true })
	return R
}

Array.prototype.append = function(O) {
	this.push.apply(this,O)
	return this
}

Array.prototype.and = function() {
	this.push.apply(this,arguments)
	return this
}

Array.prototype.except = function (E) { 
	for (var J = 0; J < this.length; ++J) if (this[J] == E) this.splice(J,1)	
}

Array.prototype.collapse = function() { 
	this.every(function(o,i) { 
		if (o.expanded) o.expanded = o.expanded.collapse();
		o.free();
	})
	return false
}

