Array.prototype.empty = function() {
	return this.length == 0
}

Array.prototype.every = function(F) {
	var I = this;
	(0).to(this.length-1, function(J) { F(I[J],J) })
	return this
}

Array.prototype.map = function(F) {
	var R = []
	this.every(function(O,J) { R.push(F(O)) })
	return R
}

// this is actually reduce... 
Array.prototype.apply = function(F,O) {
	var R = O
	this.every(function(X,J) { R = F(R,X) })
	return R
}
	
Array.prototype.contains = function(E) {
	var R = false
	this.every(function(O,J) { if (O == E) return R = true })
	return R
}

Array.prototype.append = function(O) {
	this.push.apply(this,O)
	return this
}

Array.prototype.and = function() {
	this.push.apply(this,arguments)
	return this
}

Array.prototype.except = function (E) { 
	var I = this;
	(0).to(this.length-1, function(J) { if (I[J] == E) I.splice(J,1) })
	return this
}

Array.prototype.collapse = function() { 
	this.every(function(O,J) { 
		if (O.expanded()) O.has('expanded',O.expanded.collapse())
		O.free()
	})
	return false
}

