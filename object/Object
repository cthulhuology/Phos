
global = window

Object.prototype.a = Object.prototype.an = function(I,V) { 
	return I.can('init') ? 
		I.init(V): 
		I.clone() 
}

Object.prototype.the = function(I) { return I }

Object.prototype.has = function(K,X) {
	this[K] = function() { return X }
	return this
}

Object.prototype.clone = function() {
	var Proto = function() {}
	Proto.prototype = this
	return new Proto() 
}

Object.prototype.copy = function(O) {
	var I = this
	O.each(function(V,K) { I[K] = V })
	return this 
}

Object.prototype.does = function(V,F) { 
	this[V] = F
	return this 
}

Object.prototype.from = function() {
	this['init'] = function() { return this }
	for (var J = 0; J < arguments.length; ++J) 
		this.copy(arguments[J])
	return this 
}

Object.prototype.each = function(F) {
	for (var K in this) if (this.hasOwnProperty(K) && K != 'prototype') F(this[K],K)
	return this 
}

Object.prototype.all = function(F) {
	for (var K in this) if (K != 'prototype') F(this[K],K)
	return this 
}

Object.prototype.which = function(F) {
	var W = []
	this.each(function(V,K) { if (F(V,K)) W.push(V) })
	return W 
}

Object.prototype.can = function(K) { 
	return (typeof(this[K]) == "function")
}

Object.prototype.slots = function() {
	var J = 0
	this.each(function(V,K) { if (K && V) ++J })
	return J 
}

Object.prototype.slot = function(P,K,X,Y) {
	return [ a(Block).says(this).at(X,Y).by(200,20).has('parent',c).has('valueOf', K.deparameterized()) ];
}

Object.prototype.names = function() {
	var R = []
	var I = this
	window.each(function(V,K) { if (V === I) R.push(K) })
	return R 
}

Object.prototype.name = function() { return this.names()[0] }
Object.prototype.plural = function(I) { return window[I] = this }

Object.prototype.named =  function(N) {
	var I = this
	An[N.name().toLowerCase()]= function(Y) { return a(I,Y) }
	return window[N.name()] = this 
}

Object.prototype.is = function(O) {
	var I = this
	var R = true
	O.all(function(V,K) { 
		if (O.can(K) && !I.can(K)) return R = false 
	})
	return R 
}

Object.prototype.implements = function() {
	var I = this
	var R = []
	Objects.each(function(O,K) { if (I.is(O)) R.push(K) })
	return R 
}

Object.prototype.any = function(F) {
	var R = null
	this.each(function(O,K) { if (F(O,K)) return R = O })
	return R 
}

Object.prototype.module = function() {
	var Ots = Object.prototype.toString
	Object.prototype.toString = function() {
		var R = '{ '
		this.each(function(V,K) { 
			if (typeof(V) == 'function') R = R.append(K,': ',V,', ') 
			if (typeof(V) == 'string') R = R.append(k,': "', V, '", ')
			if (typeof(V) == 'number') R = R.append(k,': ', V, ', ')
			if (typeof(V) == 'boolean') R = R.append(K,': ', V, ', ')
			if (typeof(V) == 'object') R = R.append(K, ': ', V.name(), ', ')
		})
		return R.append('}') }
	var R = 'function() { return '.append( this.toString(), ' }')
	Object.prototype.toString = Ots
	return R 
}

String.prototype.use = function() {
	var I = this
	var Modules = []
	Modules.push.apply(Modules,arguments)
	var M = Modules.shift()
	var Url = I.append(M)
	var F = function(T) {
		if (!T) alert('Failed to load '.append(Url))
		try { 
			Function.prototype.constructor.apply(window,[T])()
		} catch(E) { 
			alert('Load error: '.append(E,':',T)) 
		}
		if (Modules.length > 0 ) {
			var M = modules.shift()
			var Url = I.append(M)
			alert(M)
			Url.get(F)
		}
	}
	Url.get(F)
	return this
}
	
String.prototype.request = function(M,F,D) {
	var R = XMLHttpRequest ? new XMLHttpRequest(): _doc.createRequest()
	R.onreadystatechange = function () {
		if (this.readyState != 4 || typeof(F) != "function") return false
		if (this.status == 404) F(null)
		if (this.status == 200) F(this.responseText)
	}
	R.open(M,this,true)
	R.setRequestHeader('Content-Type','application/json')
	R.send(D ? D : '')
	return this
}

String.prototype.get = function(F) { 
	return this.request("GET",F) 
}

String.prototype.post = function(D,F) { 
	return this.request("POST",F,D) 
}

Object.prototype.download = function() {
	document.goto("data:application/json,".append(this.toString().encode()))
	return this
}

Object.prototype.when = HTMLElement.prototype.when = function(E,F) {
	this.addEventListener(E,F,false)
	return this
}

Object.prototype.value = function() { return this }

Object.prototype.parameters = function() {
	var m = /function (\([^)]*\))/.exec(this.toString());
	return m ? m[1] : "";
}

