An.object().named('Block').from(Widget,{
	init: function() { return this.clone().copy({ 
			fnt: '16 Arial',
			bg: "gray", 
			hl: "white",
			sl: "blue",
			over: false, 
			moving: false, 
			editing: false, 
			expanded: false, 
			content: false
		 }).instance() },
	says: function(t) { this.content = t; return this },
	evaluate: function() { 
		A.block().at(this.x+this.w,this.y).says(this.value()); 
		return this.content;
	},
	value: function() {
		if (!this.content) return "";
		if (this.childof) return this.childof[this.content];
		var retval = this.content
		Sound.click.play();
		try { 
			retval = eval('(' + this.content + ')') 
		} catch(e) { 
			try {
 				retval = eval( this.content );
 			} catch(ee) {
 				Sound.error.play();
 				alert(e); 
 			}
		};
		return retval;
	},
	press: function(e) {
		if (!this.editing || Keyboard.cmd || Keyboard.ctrl) return;
		this.content = e.key == Keyboard.enter && this.childof && this.valueof ?  // NB: don't turn
				this.childof[this.valueof] = this.value():		  // to a says call
			e.key == Keyboard.enter ? 					  // as it will break
				this.evaluate():					  // some objects
			e.key == Keyboard.backspace ? 
				this.content.length == 0 || Keyboard.shift ? 
					this.done():
					this.content.substring(0,this.content.length-1):
			this.content.append(e.key);
		if (this.content && Names.of(this.content)) this.content = Names.of(this.content);
		if (this.content == undefined) this.free();
	},
	selected: function() {
		return Display.selected.contains(this);
	},
	draw: function() {
		if (!this.visible) return;
		Screen[this.editing || this.over ? this.hl : this.selected() ? this.sl : this.bg]();
		Screen.at(this.x,this.y+Screen.size).by(this.w-Screen.size,this.h).font(this.fnt).print(this.content);
		this.by(Math.max(this.w,(Screen.x+Display.x)-this.x + Screen.size),(Screen.y+Display.y)-this.y + Screen.size/2);
		Screen.at(this.x-Screen.size/2,this.y).by(this.w,this.h).frame();
	},
	down: function(e) { 
		if (!e.on(this)) return;
		this.moving = e;
		if (!this.content) return;
		if (e.button < 2) return;
		Sound.click.play();
		this.value().mirror();
	},
	up: function(e) { 
		var $self = this;
		if (this.moving && (that = Widget.widgets.any(function(v,k) {
			return ![ $self, Display, Phosphor ].contains(v) && v.can('on') && v.on($self) && !v.locked }))) {
			if (that.can('drop')) {
				that.drop(this.value());
				this.free();
			} else if (this.content.isCall() && that.can(this.content.deparameterized())) {
				 eval('that.' + this.content);
			}
		}
		this.moving = false;
	},
	move: function(e) { 
		this.over = this.editing = e.on(this);
		if (this.editing) editing = this;
		if (this.moving) {
			var dx = e.x - this.moving.x;
			var dy = e.y - this.moving.y;
			this.to(e.x - this.moving.x,e.y -this.moving.y );
			this.moving = e;
		}
	},
});
